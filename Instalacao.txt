================================================================================
                    SISTEMA DE TICKETS TI - GUIA DE INSTALAÇÃO
                           GOOGLE CLOUD PLATFORM (GCP)
================================================================================

ÍNDICE:
1. PRÉ-REQUISITOS
2. ESPECIFICAÇÕES TÉCNICAS
3. CONFIGURAÇÃO INICIAL DO GCP
4. CRIAÇÃO DA INFRAESTRUTURA
5. CONFIGURAÇÃO DE SEGURANÇA E FIREWALL
6. CONFIGURAÇÃO DO BANCO DE DADOS
7. CONFIGURAÇÃO DE REDE E IP PÚBLICO
8. CONFIGURAÇÃO LDAP/ACTIVE DIRECTORY
9. DEPLOY DA APLICAÇÃO
10. CONFIGURAÇÕES FINAIS
11. MONITORAMENTO E BACKUP
12. ESTIMATIVA DE CUSTOS

================================================================================
1. PRÉ-REQUISITOS
================================================================================

ANTES DE COMEÇAR:
- Conta Google Cloud Platform ativa
- Projeto GCP criado
- Billing (faturamento) habilitado no projeto
- gcloud CLI instalado no seu computador
- Acesso administrativo ao Active Directory do cliente
- Domínio próprio registrado (ex: empresa.com.br)

INSTALAR GCLOUD CLI:
1. Baixe de: https://cloud.google.com/sdk/docs/install
2. Execute: gcloud auth login
3. Configure: gcloud config set project SEU-PROJETO-ID

================================================================================
2. ESPECIFICAÇÕES TÉCNICAS RECOMENDADAS
================================================================================

COMPUTE ENGINE (SERVIDOR PRINCIPAL):
- Tipo: e2-standard-2
- vCPUs: 2
- RAM: 8 GB
- Disco: 50 GB SSD persistente
- Sistema Operacional: Ubuntu 22.04 LTS
- Região: us-central1 (ou mais próxima do Brasil)

CLOUD SQL (BANCO DE DADOS):
- Engine: PostgreSQL 15
- Instância: db-n1-standard-1 (produção) ou db-f1-micro (teste)
- RAM: 3.75 GB (standard) ou 1.7 GB (micro)
- Armazenamento: 20 GB SSD com auto-scaling
- Backups: Automáticos diários
- Alta Disponibilidade: Sim (para produção)

LOAD BALANCER:
- Tipo: HTTP(S) Load Balancer
- SSL: Certificado gerenciado pelo Google
- Health Check: Habilitado

ESTIMATIVA DE CUSTOS MENSAIS (USD):
- Compute Engine: ~$50
- Cloud SQL: ~$70
- Load Balancer: ~$20
- Armazenamento: ~$5
- Rede: ~$10
TOTAL: ~$155/mês

================================================================================
3. CONFIGURAÇÃO INICIAL DO GCP
================================================================================

PASSO 1 - AUTENTICAÇÃO E PROJETO:
gcloud auth login
gcloud config set project SEU-PROJETO-ID

PASSO 2 - HABILITAR APIs NECESSÁRIAS:
gcloud services enable compute.googleapis.com
gcloud services enable sqladmin.googleapis.com
gcloud services enable storage.googleapis.com
gcloud services enable dns.googleapis.com
gcloud services enable cloudresourcemanager.googleapis.com

PASSO 3 - DEFINIR REGIÃO PADRÃO:
gcloud config set compute/region us-central1
gcloud config set compute/zone us-central1-a

================================================================================
4. CRIAÇÃO DA INFRAESTRUTURA
================================================================================

PASSO 1 - CRIAR VPC (REDE PRIVADA):
gcloud compute networks create tickets-vpc --subnet-mode=custom

gcloud compute networks subnets create tickets-subnet \
    --network=tickets-vpc \
    --range=10.0.0.0/24 \
    --region=us-central1

PASSO 2 - CRIAR INSTÂNCIA CLOUD SQL:
gcloud sql instances create tickets-db \
    --database-version=POSTGRES_15 \
    --tier=db-n1-standard-1 \
    --region=us-central1 \
    --network=tickets-vpc \
    --no-assign-ip \
    --storage-size=20GB \
    --storage-type=SSD \
    --backup-start-time=03:00 \
    --enable-bin-log

PASSO 3 - CRIAR BANCO DE DADOS E USUÁRIO:
gcloud sql databases create tickets --instance=tickets-db

gcloud sql users create ticketsuser \
    --instance=tickets-db \
    --password=SuaSenhaSeguraAqui123!

PASSO 4 - CRIAR VM COMPUTE ENGINE:
gcloud compute instances create tickets-server \
    --zone=us-central1-a \
    --machine-type=e2-standard-2 \
    --subnet=tickets-subnet \
    --image-family=ubuntu-2204-lts \
    --image-project=ubuntu-os-cloud \
    --boot-disk-size=50GB \
    --boot-disk-type=pd-ssd \
    --tags=tickets-server \
    --scopes=https://www.googleapis.com/auth/cloud-platform

================================================================================
5. CONFIGURAÇÃO DE SEGURANÇA E FIREWALL
================================================================================

PASSO 1 - REGRAS DE FIREWALL BÁSICAS:

# Permitir HTTP/HTTPS do Load Balancer
gcloud compute firewall-rules create allow-tickets-web \
    --network=tickets-vpc \
    --allow=tcp:80,tcp:443 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=tickets-server

# Permitir SSH apenas do seu IP
gcloud compute firewall-rules create allow-tickets-ssh \
    --network=tickets-vpc \
    --allow=tcp:22 \
    --source-ranges=SEU_IP_PUBLICO/32 \
    --target-tags=tickets-server

# Comunicação interna da VPC
gcloud compute firewall-rules create allow-internal \
    --network=tickets-vpc \
    --allow=tcp,udp,icmp \
    --source-ranges=10.0.0.0/24

PASSO 2 - CONFIGURAR CLOUD ARMOR (PROTEÇÃO AVANÇADA):

# Criar política de segurança
gcloud compute security-policies create tickets-security-policy

# Regra para permitir apenas Brasil (opcional)
gcloud compute security-policies rules create 1000 \
    --security-policy=tickets-security-policy \
    --expression="origin.region_code == 'BR'" \
    --action=allow

# Proteção contra DDoS
gcloud compute security-policies rules create 2000 \
    --security-policy=tickets-security-policy \
    --expression="true" \
    --action=rate-based-ban \
    --rate-limit-threshold-count=100 \
    --rate-limit-threshold-interval-sec=60 \
    --ban-duration-sec=600

PASSO 3 - CONFIGURAR WAF (WEB APPLICATION FIREWALL):

# Bloquear ataques SQL Injection
gcloud compute security-policies rules create 3000 \
    --security-policy=tickets-security-policy \
    --expression="has(request.headers['user-agent']) && request.headers['user-agent'].contains('sqlmap')" \
    --action=deny-403

# Bloquear scanners de vulnerabilidade
gcloud compute security-policies rules create 3001 \
    --security-policy=tickets-security-policy \
    --expression="has(request.headers['user-agent']) && (request.headers['user-agent'].contains('nmap') || request.headers['user-agent'].contains('nikto'))" \
    --action=deny-403

================================================================================
6. CONFIGURAÇÃO DO BANCO DE DADOS
================================================================================

PASSO 1 - CONECTAR NA VM:
gcloud compute ssh tickets-server --zone=us-central1-a

PASSO 2 - INSTALAR CLIENTE POSTGRESQL:
sudo apt update
sudo apt install postgresql-client -y

PASSO 3 - OBTER IP PRIVADO DO CLOUD SQL:
gcloud sql instances describe tickets-db --format="value(ipAddresses[0].ipAddress)"

PASSO 4 - TESTAR CONEXÃO:
psql -h IP_PRIVADO_CLOUD_SQL -U ticketsuser -d tickets

PASSO 5 - CONFIGURAR VARIÁVEIS DE AMBIENTE:
echo "DATABASE_URL=postgresql://ticketsuser:SuaSenhaSeguraAqui123!@IP_PRIVADO_CLOUD_SQL:5432/tickets" >> /opt/tickets/.env

================================================================================
7. CONFIGURAÇÃO DE REDE E IP PÚBLICO
================================================================================

PASSO 1 - CRIAR IP ESTÁTICO GLOBAL:
gcloud compute addresses create tickets-ip --global

PASSO 2 - OBTER O IP CRIADO:
gcloud compute addresses describe tickets-ip --global --format="value(address)"

PASSO 3 - CONFIGURAR DNS NO SEU PROVEDOR:
- Acesse o painel do seu provedor de domínio
- Crie um registro A:
  Nome: tickets (ou subdomínio desejado)
  Tipo: A
  Valor: IP_OBTIDO_NO_PASSO_2
  TTL: 300

PASSO 4 - CONFIGURAR LOAD BALANCER:

# Health check
gcloud compute health-checks create http tickets-health-check \
    --port=80 \
    --request-path=/health

# Instance group
gcloud compute instance-groups unmanaged create tickets-ig \
    --zone=us-central1-a

gcloud compute instance-groups unmanaged add-instances tickets-ig \
    --instances=tickets-server \
    --zone=us-central1-a

# Backend service
gcloud compute backend-services create tickets-backend \
    --protocol=HTTP \
    --health-checks=tickets-health-check \
    --global

gcloud compute backend-services add-backend tickets-backend \
    --instance-group=tickets-ig \
    --instance-group-zone=us-central1-a \
    --global

# Aplicar política de segurança
gcloud compute backend-services update tickets-backend \
    --security-policy=tickets-security-policy \
    --global

# URL map
gcloud compute url-maps create tickets-url-map \
    --default-service=tickets-backend

PASSO 5 - CONFIGURAR SSL/HTTPS:

# Certificado SSL gerenciado
gcloud compute ssl-certificates create tickets-ssl-cert \
    --domains=tickets.seudominio.com.br \
    --global

# Proxy HTTPS
gcloud compute target-https-proxies create tickets-https-proxy \
    --ssl-certificates=tickets-ssl-cert \
    --url-map=tickets-url-map

# Forwarding rule HTTPS
gcloud compute forwarding-rules create tickets-https-forwarding-rule \
    --address=tickets-ip \
    --global \
    --target-https-proxy=tickets-https-proxy \
    --ports=443

# Proxy HTTP (redirecionamento)
gcloud compute target-http-proxies create tickets-http-proxy \
    --url-map=tickets-url-map

# Forwarding rule HTTP
gcloud compute forwarding-rules create tickets-http-forwarding-rule \
    --address=tickets-ip \
    --global \
    --target-http-proxy=tickets-http-proxy \
    --ports=80

================================================================================
8. CONFIGURAÇÃO LDAP/ACTIVE DIRECTORY
================================================================================

CONFIGURAÇÕES NO GOOGLE CLOUD:

PASSO 1 - CONFIGURAR VPN PARA CONECTAR COM A REDE DO CLIENTE:

# Criar VPN Gateway
gcloud compute vpn-gateways create tickets-vpn-gateway \
    --network=tickets-vpc \
    --region=us-central1

# Criar túnel VPN (substitua pelos dados do cliente)
gcloud compute vpn-tunnels create tickets-vpn-tunnel \
    --peer-address=IP_PUBLICO_DO_CLIENTE \
    --shared-secret=CHAVE_COMPARTILHADA_SEGURA \
    --target-vpn-gateway=tickets-vpn-gateway \
    --region=us-central1

# Criar rota para rede do cliente
gcloud compute routes create tickets-route-to-client \
    --network=tickets-vpc \
    --next-hop-vpn-tunnel=tickets-vpn-tunnel \
    --next-hop-vpn-tunnel-region=us-central1 \
    --destination-range=192.168.0.0/16

PASSO 2 - CONFIGURAR DNS PRIVADO:
gcloud dns managed-zones create ad-zone \
    --description="Active Directory DNS" \
    --dns-name=cliente.local. \
    --networks=tickets-vpc \
    --visibility=private

CONFIGURAÇÕES NO ACTIVE DIRECTORY DO CLIENTE:

PASSO 1 - CRIAR USUÁRIO DE SERVIÇO (Execute no Domain Controller):
# Abra PowerShell como Administrador
New-ADUser -Name "TicketsService" \
    -UserPrincipalName "tickets@cliente.local" \
    -AccountPassword (ConvertTo-SecureString "SenhaSeguraDoServico123!" -AsPlainText -Force) \
    -Enabled $true \
    -PasswordNeverExpires $true \
    -Description "Conta de serviço para Sistema de Tickets"

PASSO 2 - CRIAR GRUPOS DE SEGURANÇA:
New-ADGroup -Name "TI-Tickets-Admin" -GroupScope Global -Description "Administradores do Sistema de Tickets"
New-ADGroup -Name "TI-Tickets-Technician" -GroupScope Global -Description "Técnicos do Sistema de Tickets"
New-ADGroup -Name "TI-Tickets-User" -GroupScope Global -Description "Usuários do Sistema de Tickets"

PASSO 3 - ADICIONAR USUÁRIOS AOS GRUPOS:
# Exemplo: adicionar usuário ao grupo de administradores
Add-ADGroupMember -Identity "TI-Tickets-Admin" -Members "usuario.admin"

PASSO 4 - CONFIGURAR FIREWALL DO WINDOWS SERVER:
# Permitir LDAP do Google Cloud
netsh advfirewall firewall add rule name="LDAP GCP" dir=in action=allow protocol=TCP localport=389 remoteip=10.0.0.0/24
netsh advfirewall firewall add rule name="LDAPS GCP" dir=in action=allow protocol=TCP localport=636 remoteip=10.0.0.0/24

PASSO 5 - CONFIGURAR VPN NO LADO DO CLIENTE:
- Configure seu firewall/roteador para aceitar a conexão VPN do Google Cloud
- IP remoto: IP_DO_VPN_GATEWAY_GCP
- Chave compartilhada: CHAVE_COMPARTILHADA_SEGURA
- Protocolo: IKEv1 ou IKEv2

================================================================================
9. DEPLOY DA APLICAÇÃO
================================================================================

PASSO 1 - CONECTAR NA VM:
gcloud compute ssh tickets-server --zone=us-central1-a

PASSO 2 - INSTALAR DEPENDÊNCIAS:
# Atualizar sistema
sudo apt update && sudo apt upgrade -y

# Instalar Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER

# Instalar Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Instalar Nginx
sudo apt install nginx -y

# Instalar Git
sudo apt install git -y

PASSO 3 - CLONAR O PROJETO:
sudo mkdir -p /opt/tickets
sudo chown $USER:$USER /opt/tickets
cd /opt/tickets
git clone https://github.com/seu-usuario/sistema-tickets-ti.git .

PASSO 4 - CONFIGURAR NGINX:
sudo tee /etc/nginx/sites-available/tickets > /dev/null <<EOF
server {
    listen 80;
    server_name tickets.seudominio.com.br;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=tickets:10m rate=10r/s;
    limit_req zone=tickets burst=20 nodelay;

    # Health check endpoint
    location /health {
        return 200 "OK";
        add_header Content-Type text/plain;
    }

    # Frontend
    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # WebSocket
    location /api/v1/notifications/ws {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

sudo ln -s /etc/nginx/sites-available/tickets /etc/nginx/sites-enabled/
sudo rm /etc/nginx/sites-enabled/default
sudo nginx -t && sudo systemctl reload nginx

PASSO 5 - CONFIGURAR VARIÁVEIS DE AMBIENTE:
cat > .env <<EOF
# Database
DATABASE_URL=postgresql://ticketsuser:SuaSenhaSeguraAqui123!@IP_PRIVADO_CLOUD_SQL:5432/tickets

# Security
SECRET_KEY=sua_chave_secreta_muito_segura_aqui_com_32_caracteres
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# LDAP Configuration
LDAP_SERVER=ldap://IP_DO_SERVIDOR_AD:389
LDAP_BASE_DN=DC=cliente,DC=local
LDAP_BIND_DN=CN=TicketsService,OU=Users,DC=cliente,DC=local
LDAP_BIND_PASSWORD=SenhaSeguraDoServico123!

# Application
APP_NAME=Sistema de Tickets TI
APP_VERSION=1.0.0
ADMIN_EMAIL=admin@seudominio.com.br
ADMIN_PASSWORD=!@Adm1n@sw!

# Frontend
REACT_APP_API_URL=https://tickets.seudominio.com.br
EOF

PASSO 6 - CRIAR DOCKER COMPOSE:
cat > docker-compose.yml <<EOF
version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=https://tickets.seudominio.com.br
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  uploads:
  logs:
EOF

PASSO 7 - FAZER BUILD E INICIAR:
docker-compose build
docker-compose up -d

PASSO 8 - CRIAR USUÁRIO ADMIN:
docker-compose exec backend python setup_admin.py

================================================================================
10. CONFIGURAÇÕES FINAIS
================================================================================

PASSO 1 - CONFIGURAR BACKUP AUTOMÁTICO:
# Snapshot da VM
gcloud compute resource-policies create snapshot-schedule tickets-backup \
    --region=us-central1 \
    --max-retention-days=30 \
    --on-source-disk-delete=keep-auto-snapshots \
    --daily-schedule \
    --start-time=02:00

gcloud compute disks add-resource-policies tickets-server \
    --resource-policies=tickets-backup \
    --zone=us-central1-a

PASSO 2 - CONFIGURAR MONITORAMENTO:
# Instalar agente de monitoramento
curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
sudo bash add-monitoring-agent-repo.sh
sudo apt-get update
sudo apt-get install stackdriver-agent

# Instalar agente de logging
curl -sSO https://dl.google.com/cloudagents/add-logging-agent-repo.sh
sudo bash add-logging-agent-repo.sh
sudo apt-get update
sudo apt-get install google-fluentd

PASSO 3 - CONFIGURAR ALERTAS:
# Criar política de alerta para CPU alta
gcloud alpha monitoring policies create \
    --notification-channels=NOTIFICATION_CHANNEL_ID \
    --display-name="Tickets CPU Alert" \
    --combiner=OR \
    --conditions-display-name="CPU usage" \
    --conditions-filter='resource.type="gce_instance" AND resource.label.instance_id="INSTANCE_ID"' \
    --condition-threshold-value=0.8 \
    --condition-threshold-duration=300s \
    --condition-threshold-comparison=COMPARISON_GREATER_THAN

PASSO 4 - CONFIGURAR SSL AUTOMÁTICO:
# Aguardar propagação DNS (pode levar até 24h)
# Verificar status do certificado:
gcloud compute ssl-certificates describe tickets-ssl-cert --global

================================================================================
11. MONITORAMENTO E BACKUP
================================================================================

COMANDOS ÚTEIS PARA MONITORAMENTO:

# Ver logs da aplicação
docker-compose logs -f

# Monitorar recursos do sistema
htop
df -h
free -h

# Verificar status dos serviços
docker-compose ps
sudo systemctl status nginx

# Backup manual do banco de dados
gcloud sql export sql tickets-db gs://seu-bucket-backup/backup-$(date +%Y%m%d).sql --database=tickets

# Restaurar backup
gcloud sql import sql tickets-db gs://seu-bucket-backup/backup-20231201.sql --database=tickets

CONFIGURAR BUCKET PARA BACKUPS:
gsutil mb gs://tickets-backup-seu-projeto
gsutil lifecycle set backup-lifecycle.json gs://tickets-backup-seu-projeto

================================================================================
12. ESTIMATIVA DE CUSTOS DETALHADA
================================================================================

CUSTOS MENSAIS ESTIMADOS (USD):

COMPUTE ENGINE (e2-standard-2):
- Instância: ~$50/mês
- Disco SSD 50GB: ~$8/mês

CLOUD SQL (db-n1-standard-1):
- Instância: ~$70/mês
- Armazenamento 20GB: ~$4/mês
- Backup: ~$2/mês

NETWORKING:
- Load Balancer: ~$18/mês
- Tráfego de saída: ~$5-15/mês (dependendo do uso)

OUTROS:
- Cloud Storage (backups): ~$2/mês
- Cloud DNS: ~$1/mês
- VPN Gateway: ~$36/mês

TOTAL ESTIMADO: $196-206/mês

DICAS PARA REDUZIR CUSTOS:
- Use db-f1-micro para desenvolvimento (~$25/mês)
- Configure auto-scaling para a VM
- Use Cloud CDN para reduzir tráfego
- Configure alertas de billing

================================================================================
CHECKLIST FINAL DE SEGURANÇA
================================================================================

□ Firewall configurado com regras restritivas
□ Cloud Armor (WAF) ativo
□ SSL/HTTPS habilitado e funcionando
□ VPN configurada para LDAP
□ Backups automáticos configurados
□ Monitoramento e alertas ativos
□ Logs centralizados
□ Senhas fortes em todos os serviços
□ Atualizações automáticas de segurança habilitadas
□ Acesso SSH restrito por IP
□ Rate limiting configurado no Nginx
□ Headers de segurança configurados

================================================================================
CONTATOS DE SUPORTE
================================================================================

Google Cloud Support: https://cloud.google.com/support
Documentação GCP: https://cloud.google.com/docs
Administrador do Sistema: [seu-email@empresa.com]

================================================================================
NOTAS IMPORTANTES
================================================================================

1. SUBSTITUA TODOS OS VALORES DE EXEMPLO pelos valores reais do seu ambiente
2. TESTE A CONECTIVIDADE LDAP antes de colocar em produção
3. CONFIGURE ALERTAS para monitoramento proativo
4. MANTENHA BACKUPS regulares e teste a restauração
5. ATUALIZE REGULARMENTE o sistema operacional e dependências
6. MONITORE OS CUSTOS através do console GCP
7. DOCUMENTE todas as senhas e configurações em local seguro

Este guia fornece uma implementação completa e segura no Google Cloud Platform.
Adapte conforme necessário para seu ambiente específico.

================================================================================
FIM DO GUIA DE INSTALAÇÃO
================================================================================
